{
	"name": "myfirstflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_RAW_MOVIES",
						"type": "DatasetReference"
					},
					"name": "movies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_REFINED_MOVIES",
						"type": "DatasetReference"
					},
					"name": "refined"
				}
			],
			"transformations": [
				{
					"name": "selectCorrectColumnName"
				},
				{
					"name": "moviesFilterAbove"
				},
				{
					"name": "derivedGenre"
				},
				{
					"name": "createRank"
				},
				{
					"name": "aggregateRank"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> movies",
				"movies select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          RottenTomato = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCorrectColumnName",
				"selectCorrectColumnName filter(toInteger(year) > 1950) ~> moviesFilterAbove",
				"moviesFilterAbove derive({Primary Genre} = iif(locate('|', genres) > 1, left(genres, locate('|', genres) -1 ), genres)) ~> derivedGenre",
				"derivedGenre window(over({Primary Genre},",
				"          year),",
				"     asc(RottenTomato, true),",
				"     Rank = rank()) ~> createRank",
				"createRank aggregate(groupBy({Primary Genre},",
				"          year),",
				"     average = avg(toInteger(RottenTomato)),",
				"          highestRank = first(title),",
				"          MinorRank = last(title),",
				"          countRecords = count()) ~> aggregateRank",
				"aggregateRank sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> refined"
			]
		}
	}
}